name: Deploy to PyPI

on:
  release:
    types: [published]
  push:
    branches: [main]

jobs:
  build-wheels:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.10', '3.11', '3.12']
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install build dependencies
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get update && sudo apt-get install -y build-essential

    - name: Upgrade build tools
      run: python -m pip install --upgrade pip setuptools wheel cibuildwheel

    - name: Build wheels
      shell: bash
      env:
        CC: gcc
        CXX: g++
        LDSHARED: gcc -shared
      run: |
        python -m cibuildwheel --platform linux --output-dir dist

    - uses: actions/upload-artifact@v4
      with:
        name: dist-${{ matrix.os }}-${{ matrix.python-version }}
        path: dist/

  deploy:
    needs: build-wheels
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Status - Starting Deploy Process
      run: echo "ðŸš€ Starting deployment process..."

    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist/

    - name: Status - Artifacts Downloaded
      run: echo "âœ… Build artifacts downloaded successfully"

    - name: Install Twine
      run: python -m pip install --upgrade twine

    - name: Status - Ready for PyPI Upload
      run: echo "ðŸ“¦ Twine installed, starting PyPI upload..."

    - name: Publish to PyPI
      run: twine upload dist/*/*.whl dist/*/*.tar.gz
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}

    - name: Status - Deploy Complete
      run: echo "ðŸŽ‰ Deployment completed successfully!"

    - name: Debug - Files Uploaded
      run: find dist/ -name "*.whl" -o -name "*.tar.gz" | sort
